#!/usr/bin/env python3
"""
Secure Configuration Setup for Sentinel Telegram Alerting.

This script helps set up secure credential management for the Telegram bot
without exposing sensitive information in configuration files.

Author: Workspace 002
Date: 2025-08-19
"""

import os
import sys
import getpass
import hashlib
import json
from pathlib import Path
from typing import Optional, Dict, Any


class SecureConfigManager:
    """Manages secure configuration for Sentinel alerting."""
    
    def __init__(self, config_dir: Path = None):
        """Initialize the secure config manager."""
        if config_dir is None:
            config_dir = Path.home() / ".veris-sentinel"
        
        self.config_dir = config_dir
        self.config_file = config_dir / "secure_config.json"
        self.env_file = Path(".env.sentinel")
        
        # Create config directory if it doesn't exist
        self.config_dir.mkdir(parents=True, exist_ok=True, mode=0o700)
    
    def setup_telegram_credentials(self) -> Dict[str, str]:
        """Interactively set up Telegram credentials."""
        print("\n=== Telegram Bot Setup ===")
        print("Please provide your Telegram bot credentials.")
        print("These will be stored securely and not exposed in configuration files.\n")
        
        # Get bot token
        while True:
            bot_token = getpass.getpass("Enter Telegram Bot Token (hidden): ").strip()
            if self._validate_bot_token(bot_token):
                break
            print("❌ Invalid bot token format. Please try again.")
        
        # Get chat ID
        while True:
            chat_id = input("Enter Telegram Chat ID: ").strip()
            if chat_id and (chat_id.startswith("-") or chat_id.isdigit()):
                break
            print("❌ Invalid chat ID format. Please try again.")
        
        return {
            "telegram_bot_token": bot_token,
            "telegram_chat_id": chat_id
        }
    
    def setup_github_credentials(self) -> Optional[Dict[str, str]]:
        """Optionally set up GitHub credentials."""
        print("\n=== GitHub Integration (Optional) ===")
        response = input("Do you want to configure GitHub issue creation? (y/n): ").lower()
        
        if response != 'y':
            return None
        
        print("\nPlease provide your GitHub credentials.")
        print("You need a personal access token with 'repo' and 'issues' permissions.\n")
        
        # Get GitHub token
        github_token = getpass.getpass("Enter GitHub Personal Access Token (hidden): ").strip()
        
        # Get repository
        while True:
            github_repo = input("Enter GitHub Repository (owner/repo): ").strip()
            if "/" in github_repo:
                break
            print("❌ Invalid repository format. Use 'owner/repo' format.")
        
        return {
            "github_token": github_token,
            "github_repo": github_repo,
            "github_issues_enabled": "true"
        }
    
    def _validate_bot_token(self, token: str) -> bool:
        """Validate Telegram bot token format."""
        # Telegram bot tokens have format: <bot_id>:<hash>
        if ":" not in token:
            return False
        
        parts = token.split(":")
        if len(parts) != 2:
            return False
        
        # Bot ID should be numeric
        if not parts[0].isdigit():
            return False
        
        # Hash should be alphanumeric with possible - and _
        if not all(c.isalnum() or c in "-_" for c in parts[1]):
            return False
        
        return True
    
    def save_secure_config(self, credentials: Dict[str, str]) -> None:
        """Save credentials securely."""
        # Create a hash of the credentials for verification
        cred_hash = hashlib.sha256(
            json.dumps(credentials, sort_keys=True).encode()
        ).hexdigest()
        
        secure_data = {
            "version": "1.0",
            "hash": cred_hash,
            "encrypted": False,  # In production, you'd encrypt this
            "credentials": credentials
        }
        
        # Save with restricted permissions
        with open(self.config_file, 'w') as f:
            json.dump(secure_data, f, indent=2)
        
        # Set file permissions to owner-only
        self.config_file.chmod(0o600)
        
        print(f"\n✅ Secure configuration saved to: {self.config_file}")
    
    def generate_env_file(self, credentials: Dict[str, str]) -> None:
        """Generate .env.sentinel file with references to secure storage."""
        template = """# Veris Memory Sentinel Configuration
# Generated by secure configuration setup
# Actual credentials are stored securely in ~/.veris-sentinel/

# ===================================
# TELEGRAM CONFIGURATION
# ===================================
# Credentials are loaded from secure storage
# To update: python scripts/setup_secure_config.py
TELEGRAM_ENABLED=true
TELEGRAM_RATE_LIMIT=30

# ===================================
# GITHUB INTEGRATION
# ===================================
GITHUB_ISSUES_ENABLED={github_enabled}
GITHUB_ISSUE_LABELS=sentinel,automated,monitoring

# ===================================
# ALERT CONFIGURATION
# ===================================
ALERT_DEDUP_WINDOW_MIN=30
ALERT_THRESHOLD_FAILURES=3
SUMMARY_INTERVAL_HOURS=24

# ===================================
# SENTINEL RUNNER CONFIGURATION
# ===================================
CHECK_INTERVAL_SECONDS=300
SENTINEL_DB_PATH=/var/lib/sentinel/sentinel.db
SENTINEL_API_PORT=8081
SENTINEL_DEBUG=false

# ===================================
# SECURE CREDENTIAL LOADING
# ===================================
# The following line tells the application to load credentials from secure storage
LOAD_SECURE_CREDENTIALS=true
SECURE_CONFIG_PATH={config_path}
"""
        
        github_enabled = "true" if "github_token" in credentials else "false"
        
        content = template.format(
            github_enabled=github_enabled,
            config_path=self.config_file
        )
        
        with open(self.env_file, 'w') as f:
            f.write(content)
        
        print(f"✅ Environment file generated: {self.env_file}")
    
    def load_secure_config(self) -> Optional[Dict[str, str]]:
        """Load existing secure configuration."""
        if not self.config_file.exists():
            return None
        
        try:
            with open(self.config_file, 'r') as f:
                data = json.load(f)
            
            return data.get("credentials", {})
        except Exception as e:
            print(f"❌ Error loading secure config: {e}")
            return None
    
    def export_to_environment(self, credentials: Dict[str, str]) -> None:
        """Export credentials to environment variables."""
        mapping = {
            "telegram_bot_token": "TELEGRAM_BOT_TOKEN",
            "telegram_chat_id": "TELEGRAM_CHAT_ID",
            "github_token": "GITHUB_TOKEN",
            "github_repo": "GITHUB_REPO"
        }
        
        for key, env_var in mapping.items():
            if key in credentials:
                os.environ[env_var] = credentials[key]
        
        print("✅ Credentials exported to environment variables")
    
    def create_systemd_service(self) -> None:
        """Generate systemd service file with secure credential loading."""
        service_content = f"""[Unit]
Description=Veris Memory Sentinel Monitoring
After=network.target

[Service]
Type=simple
User={os.getenv('USER', 'veris')}
WorkingDirectory=/opt/veris-memory
ExecStart=/usr/bin/python3 -m src.monitoring.sentinel.runner
Restart=always
RestartSec=10

# Load credentials from secure storage
EnvironmentFile=-{self.config_dir}/sentinel.env

# Security settings
NoNewPrivileges=true
PrivateTmp=true
ProtectSystem=strict
ProtectHome=true
ReadWritePaths=/var/lib/sentinel /var/log/sentinel

[Install]
WantedBy=multi-user.target
"""
        
        service_file = Path("sentinel-monitoring.service")
        with open(service_file, 'w') as f:
            f.write(service_content)
        
        print(f"✅ Systemd service file created: {service_file}")
        print("   To install: sudo cp sentinel-monitoring.service /etc/systemd/system/")
        print("   To enable: sudo systemctl enable sentinel-monitoring")
        print("   To start: sudo systemctl start sentinel-monitoring")


def main():
    """Main setup flow."""
    print("=" * 60)
    print("Veris Memory Sentinel - Secure Configuration Setup")
    print("=" * 60)
    
    manager = SecureConfigManager()
    
    # Check for existing configuration
    existing_config = manager.load_secure_config()
    if existing_config:
        print("\n⚠️ Existing configuration found.")
        response = input("Do you want to overwrite it? (y/n): ").lower()
        if response != 'y':
            print("Using existing configuration.")
            manager.export_to_environment(existing_config)
            return
    
    # Set up credentials
    credentials = {}
    
    # Telegram (required)
    telegram_creds = manager.setup_telegram_credentials()
    credentials.update(telegram_creds)
    
    # GitHub (optional)
    github_creds = manager.setup_github_credentials()
    if github_creds:
        credentials.update(github_creds)
    
    # Save configuration
    manager.save_secure_config(credentials)
    manager.generate_env_file(credentials)
    
    # Optional: Create systemd service
    print("\n=== Systemd Service (Optional) ===")
    response = input("Generate systemd service file? (y/n): ").lower()
    if response == 'y':
        manager.create_systemd_service()
    
    # Export to environment for immediate use
    manager.export_to_environment(credentials)
    
    print("\n" + "=" * 60)
    print("✅ Setup Complete!")
    print("=" * 60)
    print("\nYour credentials are now securely configured.")
    print("To test the configuration, run:")
    print("  python scripts/test_telegram_alerts.py")
    print("\nTo start Sentinel monitoring:")
    print("  python -m src.monitoring.sentinel.runner")
    
    # Security reminder
    print("\n🔐 Security Notes:")
    print(f"- Credentials stored in: {manager.config_file}")
    print("- This file has restricted permissions (owner-only)")
    print("- Never commit .env.sentinel or secure_config.json to git")
    print("- Rotate tokens regularly for security")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n❌ Setup cancelled by user.")
        sys.exit(1)
    except Exception as e:
        print(f"\n❌ Setup failed: {e}")
        sys.exit(1)