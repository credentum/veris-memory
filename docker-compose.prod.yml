version: '3.8'

services:
  # Vector Database
  qdrant:
    image: qdrant/qdrant:v1.12.1
    container_name: veris-qdrant
    restart: always
    ports:
      - "127.0.0.1:6333:6333"
      - "127.0.0.1:6334:6334"
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__LOG_LEVEL=INFO
      - QDRANT__STORAGE__STORAGE_PATH=/qdrant/storage
      - QDRANT__STORAGE__ON_DISK_PAYLOAD=true
    volumes:
      - qdrant_data:/qdrant/storage
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:6333/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Graph Database
  neo4j:
    image: neo4j:5.15-community
    container_name: veris-neo4j
    restart: always
    ports:
      - "127.0.0.1:7474:7474"
      - "127.0.0.1:7687:7687"
    environment:
      - NEO4J_AUTH=${NEO4J_AUTH:-neo4j/password123}
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=2G
      - NEO4J_dbms_memory_pagecache_size=512m
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_dbms_connector_bolt_enabled=true
      - NEO4J_dbms_connector_http_enabled=true
      - NEO4J_dbms_connector_bolt_listen__address=0.0.0.0:7687
      - NEO4J_dbms_connector_http_listen__address=0.0.0.0:7474
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "${NEO4J_PASSWORD:-password123}", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Cache/Session Store
  redis:
    image: redis:7.2-alpine
    container_name: veris-redis
    restart: always
    ports:
      - "127.0.0.1:6379:6379"
    command: >
      redis-server
      --appendonly yes
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Bootstrap service - runs once to setup Qdrant
  bootstrap:
    image: python:3.11-slim
    container_name: veris-bootstrap
    depends_on:
      qdrant:
        condition: service_healthy
    volumes:
      - ./ops/bootstrap:/app/bootstrap
      - ./production_locked_config.yaml:/app/config.yaml:ro
    environment:
      - QDRANT_URL=http://qdrant:6333
      - EMBEDDING_DIM=384
      - DISTANCE_METRIC=Cosine
    command: >
      sh -c "
      pip install requests pyyaml &&
      python /app/bootstrap/qdrant_bootstrap.py --ensure-collection --stats ||
      echo 'Bootstrap may have already run'
      "
    restart: "no"

  # API Service (optional - uncomment if needed)
  # api:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   container_name: veris-api
  #   restart: always
  #   ports:
  #     - "127.0.0.1:8000:8000"
  #   environment:
  #     - QDRANT_URL=http://qdrant:6333
  #     - NEO4J_URL=bolt://neo4j:7687
  #     - NEO4J_USER=neo4j
  #     - NEO4J_PASSWORD=${NEO4J_PASSWORD:-password123}
  #     - REDIS_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379
  #     - EMBEDDING_MODEL=all-MiniLM-L6-v2
  #     - EMBEDDING_DIM=384
  #   depends_on:
  #     qdrant:
  #       condition: service_healthy
  #     neo4j:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #     bootstrap:
  #       condition: service_completed_successfully
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8000/health/live"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 30s

volumes:
  qdrant_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: veris-network
    driver: bridge