schema_version: 1.0
suite_id: "veris-day2-ops"
purpose: "Keep production green: smoke, alerts, backups, and drills"

schedules:
  - id: hourly-smoke
    run: "0 * * * *"            # hourly
    task: "ops/smoke/smoke_runner.py"
    gate: "ops/smoke/deploy_guard.py /tmp/veris_smoke_report.json"
    alert_on_fail: true

  - id: config-drift-check
    run: "30 */6 * * *"         # Every 6 hours at :30
    task: "python ops/verify/manifest_verifier.py --require-text-index"
    purpose: "Detect vector dimension/distance drift before it causes silent failures"
    alert_on_fail: true

  - id: nightly-backup
    run: "15 2 * * *"           # 02:15
    task: "python backup_system.py --qdrant --neo4j --prune=14"
    retention_days: 14
    alert_on_fail: true

  - id: weekly-restore-drill
    run: "30 3 * * 0"           # Sun 03:30
    task: "python ops/backup/restore_verify.py --latest --dry-run --report"
    alert_on_fail: true
    report_to: "ops/reports/restore-drill-{YYYY-MM-DD}.json"

  - id: weekly-index-maint
    run: "0 4 * * 0"            # Sun 04:00  
    task: "python ops/maint/compact_indexes.py --qdrant --verify"
    alert_on_fail: false       # Maintenance, not critical

  - id: daily-metrics-collection
    run: "5 */6 * * *"          # Every 6 hours at :05
    task: "python slo_monitor.py --collect --store-in-veris"
    retention_hours: 168       # 7 days

alerts:
  slo:
    p95_latency_ms: 300
    error_rate_pct: 0.5
    recovery_top1_pct: 95
    index_freshness_s: 1
    
  thresholds:
    warning: 1          # 1 breach = warning
    critical: 3         # 3 consecutive = critical
    
  actions:
    - on: "breach"
      do: "create_incident"
      severity: "warning"
      
    - on: "breach_3x_consecutive" 
      do: "rollback_last_deploy"
      severity: "critical"
      
    - on: "recovery_drop_below_90"
      do: "disable_filters_hotfix"
      severity: "critical"
      
    - on: "config_drift_detected"
      do: "freeze_deployments_create_critical_incident"
      severity: "critical"
      message: "Vector dimension/distance drift detected - prevents silent mis-indexing"

incident_playbook:
  - step: "Freeze deploys; label current commit"
    cmd: "git tag incident-$(date +%Y%m%d-%H%M%S) && echo 'DEPLOY_FREEZE=true' >> .env"
    
  - step: "Fetch last 3 smoke reports + manifest diff"
    cmd: "ls -t /tmp/veris_smoke_report*.json | head -3"
    
  - step: "Run focused E2E (Store→Search) with wait=true"
    cmd: "python ops/smoke/focused_e2e.py --store-search --wait-writes"
    
  - step: "If indexing OK but latency high → lower RERANK_TOP_K or raise gate margin"
    condition: "latency > 300ms AND recovery > 95%"
    cmd: "python ops/hotfix/reduce_rerank_load.py --top-k=10"
    
  - step: "If recall drops with filters → disable filters, run miss-audit, hotfix tags" 
    condition: "recovery < 90%"
    cmd: "python filter_miss_audit.py --emergency-mode --disable-filters"
    
  - step: "If still red → rollback, attach reports to incident"
    condition: "smoke_status == RED after hotfixes"
    cmd: "docker-compose down && git checkout HEAD~1 && docker-compose up -d"

monitoring:
  dashboards:
    - name: "Veris Production Health"
      url: "http://localhost:3000/d/veris-prod"
      panels:
        - slo_compliance
        - p95_latency_trend  
        - recovery_rate_trend
        - index_freshness
        - error_rate_by_endpoint

  log_aggregation:
    - path: "/app/data/logs/app.log"
      parser: "json"
      index: "veris-prod"
      retention_days: 30
      
    - path: "/tmp/veris_smoke_report*.json"
      parser: "json"
      index: "veris-smoke"
      retention_days: 90

maintenance_windows:
  - name: "Weekly Maintenance"
    schedule: "0 5 * * 0"       # Sun 05:00
    duration_hours: 2
    activities:
      - "Index optimization"
      - "Log rotation"
      - "Backup verification"
      - "Security updates (if available)"
    
  - name: "Monthly Deep Clean"
    schedule: "0 6 1 * *"       # 1st of month 06:00
    duration_hours: 4
    activities:
      - "Full backup + offsite sync"
      - "Performance baseline refresh"
      - "Dependency updates"
      - "Disaster recovery drill"

disaster_recovery:
  rto_minutes: 30             # Recovery Time Objective
  rpo_minutes: 60             # Recovery Point Objective
  
  backup_strategy:
    - type: "incremental"
      frequency: "hourly"
      retention: "7 days"
      
    - type: "full"
      frequency: "daily"
      retention: "30 days"
      
    - type: "archive"
      frequency: "monthly" 
      retention: "12 months"
      offsite: true

  failover_procedure:
    - "Verify backup integrity"
    - "Spin up secondary environment"
    - "Restore from latest backup"
    - "Run smoke tests on secondary"
    - "Update DNS/load balancer"
    - "Monitor for 1 hour"

# Configuration drift detection
config_guard:
  files:
    - "production_locked_config.yaml"
    - ".ctxrc.yaml"
    - "docker-compose.yml"
  check_frequency: "daily"
  alert_on_drift: true
  auto_revert: false          # Manual approval required

# Security monitoring
security:
  vulnerability_scanning: "weekly"
  log_analysis: "continuous"
  access_audit: "monthly"
  
  alerts:
    - "Unauthorized access attempts"
    - "Unusual query patterns"
    - "Config file modifications"
    - "Failed authentication spikes"