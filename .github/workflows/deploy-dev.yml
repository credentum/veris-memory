name: Deploy to Development Environment

on:
  push:
    branches: [main]
    paths:
      - 'context-store/**'
      - '.github/workflows/deploy-dev.yml'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even without changes'
        required: false
        default: false
        type: boolean

jobs:
  deploy-dev:
    name: Deploy to Dev Environment
    runs-on: ubuntu-latest
    environment: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          # Mask secrets in logs
          echo "::add-mask::${{ secrets.HETZNER_SSH_KEY }}"
          echo "::add-mask::${{ secrets.NEO4J_PASSWORD }}"
          
          # Create SSH key with secure permissions
          # Use printf to preserve newlines in the key
          printf '%s\n' "${{ secrets.HETZNER_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          
          # Add SSH host to known hosts to avoid prompt
          ssh-keyscan -t ed25519 -H ${{ secrets.HETZNER_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || true
          
          # Test SSH key format
          if ! ssh-keygen -l -f ~/.ssh/id_ed25519 >/dev/null 2>&1; then
            echo "Error: Invalid SSH key format"
            exit 1
          fi

      - name: Deploy to Dev Environment
        env:
          NEO4J_PASSWORD: ${{ secrets.NEO4J_PASSWORD }}
        run: |
          # Use heredoc that allows variable expansion from GitHub Actions
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=~/.ssh/known_hosts -i ~/.ssh/id_ed25519 ${{ secrets.HETZNER_USER }}@${{ secrets.HETZNER_HOST }} << EOF
            set -e
            
            echo "üîµ DEVELOPMENT DEPLOYMENT STARTING"
            echo "=================================="
            
            # Export dev environment variables with actual password value
            # NEO4J_PASSWORD is expanded from GitHub Actions environment  
            export NEO4J_PASSWORD="${NEO4J_PASSWORD}"
            echo "‚úÖ Using NEO4J_PASSWORD from GitHub secrets"
            export ENVIRONMENT=dev
            
            # Navigate to veris-memory repository
            cd /opt/veris-memory
            
            # Pull latest changes
            echo "üì• Pulling latest changes from repository..."
            git fetch origin
            git reset --hard origin/main
            
            # No need to navigate to context-store - everything is in repo root
            # cd context-store
            
            # Check if deployment script exists
            if [ -f "scripts/deploy-environment.sh" ]; then
              echo "üöÄ Running environment deployment script for DEV..."
              chmod +x scripts/deploy-environment.sh
              ./scripts/deploy-environment.sh dev
            else
              echo "‚ö†Ô∏è Environment deployment script not found, using fallback..."
              
              # Fallback deployment for dev
              echo "üõë Stopping existing dev containers..."
              docker compose -p veris-memory-dev down --remove-orphans 2>/dev/null || true
              
              # Stop containers on dev ports (standard ports we test with)
              for port in 8000 6333 7474 7687 6379 6334; do
                containers=$(docker ps --filter "publish=$port" --format "{{.Names}}" 2>/dev/null || true)
                if [ -n "$containers" ]; then
                  echo "Stopping containers on port $port: $containers"
                  docker stop $containers 2>/dev/null || true
                  docker rm $containers 2>/dev/null || true
                fi
              done
              
              # Dev uses standard docker compose file
              COMPOSE_FILE="docker-compose.yml"
              echo "‚úÖ Using standard docker compose for dev environment"
              
              # Setup dev environment file
              if [ -f ".env.dev" ]; then
                cp .env.dev .env
              elif [ -f ".env.template" ]; then
                cp .env.template .env
              fi
              
              # Ensure NEO4J_PASSWORD is in .env file for docker-compose
              echo "NEO4J_PASSWORD=${NEO4J_PASSWORD}" >> .env
              echo "‚úÖ Added NEO4J_PASSWORD to .env file"
              
              # Start dev services
              echo "üöÄ Starting DEV services..."
              docker compose -p veris-memory-dev -f "$COMPOSE_FILE" up -d --build
              
              # Wait for services
              echo "‚è≥ Waiting for DEV services to be healthy..."
              timeout=300
              count=0
              # Dev always uses standard ports (8000)
              health_url="http://localhost:8000/health"
              
              while [ $count -lt $timeout ]; do
                if curl -f "$health_url" > /dev/null 2>&1; then
                  echo "‚úÖ DEV services are healthy"
                  break
                fi
                echo "Waiting... ($count/$timeout)"
                sleep 10
                count=$((count + 10))
              done
              
              if [ $count -ge $timeout ]; then
                echo "‚ùå DEV services failed to become healthy"
                docker compose -p veris-memory-dev -f "$COMPOSE_FILE" logs --tail=50
                exit 1
              fi
            fi
            
            echo ""
            echo "üîµ DEV DEPLOYMENT COMPLETED"
            echo "=================================="
          EOF

      - name: Verify Dev Deployment
        run: |
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=~/.ssh/known_hosts -i ~/.ssh/id_ed25519 ${{ secrets.HETZNER_USER }}@${{ secrets.HETZNER_HOST }} << 'EOF'
            echo "üîç Verifying DEV deployment..."
            cd /opt/veris-memory/context-store
            
            # Show dev containers
            echo "Dev containers running:"
            docker ps --format "table {{.Names}}\t{{.Status}}" | grep -E "dev|NAME" || docker ps --format "table {{.Names}}\t{{.Status}}" | head -5
            
            # Check dev service health
            echo ""
            echo "Dev service health:"
            
            # Dev uses standard ports (what we test with)
            echo -n "  Redis: "
            echo "PING" | nc -w 2 localhost 6379 | grep -q PONG && echo "‚úì (6379)" || echo "‚úó"
            
            echo -n "  Neo4j: "
            timeout 1 bash -c "</dev/tcp/localhost/7474" 2>/dev/null && echo "‚úì (7474)" || echo "‚úó"
            
            echo -n "  Qdrant: "
            curl -s http://localhost:6333/health > /dev/null 2>&1 && echo "‚úì (6333)" || echo "‚úó"
            
            echo -n "  API: "
            curl -s http://localhost:8000/health > /dev/null 2>&1 && echo "‚úì (8000)" || echo "‚úó"
          EOF

      - name: Run Dev Smoke Tests
        continue-on-error: true
        run: |
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=~/.ssh/known_hosts -i ~/.ssh/id_ed25519 ${{ secrets.HETZNER_USER }}@${{ secrets.HETZNER_HOST }} << 'EOF'
            echo "üß™ Running smoke tests on DEV environment..."
            cd /opt/veris-memory/context-store
            
            # Dev uses standard ports (what we test with)
            API_URL="http://localhost:8000"
            QDRANT_URL="http://localhost:6333"
            NEO4J_URL="http://localhost:7474"
            echo "Testing dev environment on standard ports..."
            
            # Run smoke tests if available
            if [ -f "ops/smoke/smoke_runner.py" ]; then
              python3 ops/smoke/smoke_runner.py \
                --api-url "$API_URL" \
                --qdrant-url "$QDRANT_URL" \
                --neo4j-url "$NEO4J_URL" \
                --timeout 30 || echo "‚ö†Ô∏è Some smoke tests failed (non-blocking)"
            else
              echo "‚ö†Ô∏è Smoke test runner not found, skipping tests"
            fi
          EOF

      - name: Cleanup SSH key
        if: always()
        run: |
          rm -f ~/.ssh/id_ed25519

      - name: Notify Deployment Status
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "‚úÖ Development deployment successful!"
            echo "üîµ Environment: DEV"
            echo "üåê Server: ${{ secrets.HETZNER_HOST }}"
            echo "üìç Location: /opt/veris-memory"
            echo ""
            echo "üìù Note: Production deployment requires manual intervention"
          else
            echo "‚ùå Development deployment failed!"
            echo "Please check the logs for details"
          fi