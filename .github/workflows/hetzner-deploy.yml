name: Deploy to Hetzner Dedicated Server

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to Hetzner
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          # Mask secrets in logs
          echo "::add-mask::${{ secrets.HETZNER_SSH_KEY }}"
          echo "::add-mask::${{ secrets.NEO4J_PASSWORD }}"
          echo "::add-mask::${{ secrets.TAILSCALE_AUTHKEY }}"
          
          # Create SSH key with secure permissions
          echo "${{ secrets.HETZNER_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H ${{ secrets.HETZNER_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to Hetzner server
        run: |
          ssh -i ~/.ssh/id_ed25519 ${{ secrets.HETZNER_USER }}@${{ secrets.HETZNER_HOST }} << 'EOF'
            set -e
            
            # Navigate to deployment directory
            cd /opt/veris-memory
            
            # Pull latest changes
            echo "🔄 Pulling latest changes from repository..."
            git fetch origin
            git reset --hard origin/main
            
            # Set up environment
            cd context-store
            cp .env.hetzner .env
            
            # Update environment variables
            sed -i "s/NEO4J_PASSWORD=.*/NEO4J_PASSWORD=${{ secrets.NEO4J_PASSWORD }}/" .env
            sed -i "s/TAILSCALE_AUTHKEY=.*/TAILSCALE_AUTHKEY=${{ secrets.TAILSCALE_AUTHKEY }}/" .env
            sed -i "s/TAILSCALE_HOSTNAME=.*/TAILSCALE_HOSTNAME=veris-memory-hetzner/" .env
            
            # Stop existing services
            echo "🛑 Stopping existing services..."
            docker-compose -f docker-compose.hetzner.yml down || true
            
            # Build new images
            echo "🏗️  Building updated images..."
            docker build -f Dockerfile.hetzner -t context-store:hetzner .
            
            # Start services
            echo "🚀 Starting services..."
            docker-compose -f docker-compose.hetzner.yml up -d
            
            # Wait for services to be healthy
            echo "⏳ Waiting for services to be healthy..."
            timeout=300
            count=0
            while [ $count -lt $timeout ]; do
              if curl -f http://localhost:8000/health > /dev/null 2>&1; then
                echo "✅ Services are healthy"
                break
              fi
              echo "Waiting for services... ($count/$timeout)"
              sleep 10
              count=$((count + 10))
            done
            
            if [ $count -ge $timeout ]; then
              echo "❌ Services failed to become healthy"
              docker-compose -f docker-compose.hetzner.yml logs
              exit 1
            fi
            
            # Verify deployment
            echo "🔍 Verifying deployment..."
            docker-compose -f docker-compose.hetzner.yml ps
            
            echo "🎉 Deployment completed successfully!"
          EOF

      - name: Verify deployment
        run: |
          # Test the deployment through Tailscale network if accessible
          echo "✅ Hetzner deployment workflow completed"
          echo "🌐 Access via Tailscale network at: veris-memory-hetzner"
          echo "📍 Deployment target: Hetzner dedicated server"

      - name: Cleanup SSH key
        if: always()
        run: |
          rm -f ~/.ssh/id_ed25519
