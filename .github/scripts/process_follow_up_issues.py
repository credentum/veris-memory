#!/usr/bin/env python3
"""
Process follow-up issues from automation comments.
This script runs in a sandboxed environment with restricted permissions.
"""
import os
import re
import sys

import yaml

# Security: Restrict operations
max_file_size = 1024 * 1024  # 1MB limit

try:
    with open("automation.txt", "r") as f:
        content = f.read(max_file_size)

    yaml_match = re.search(r"```yaml\s*\n(.*?)\n```", content, re.DOTALL)
    if yaml_match:
        try:
            data = yaml.safe_load(yaml_match.group(1))
            issues = data.get("automated_issues", [])

            if issues:
                print(f"Found {len(issues)} automation issues")

                # Use default labels - no dynamic imports for security
                validated_labels = ["from-code-review", "sprint-current", "phase:4.1"]

                # Build issue content with proper escaping
                checklist = []
                for issue in issues[:20]:  # Limit to 20 issues for safety
                    # Sanitize inputs
                    title = str(issue.get("title", "Untitled"))[:200]
                    desc = str(issue.get("description", "No description"))[:500]
                    phase = str(issue.get("phase", "unknown"))[:50]

                    # Escape markdown special characters
                    title = title.replace("*", "\\*").replace("_", "\\_")
                    desc = desc.replace("*", "\\*").replace("_", "\\_")

                    checklist.append(f"- [ ] **{title}**: {desc} (phase: {phase})")

                # Get environment variables with sanitization
                pr_num = re.sub(r"[^0-9]", "", os.environ.get("PR_NUM", "0"))[:10]
                pr_url = os.environ.get("PR_URL", "#")
                pr_author = re.sub(r"[^a-zA-Z0-9-_]", "", os.environ.get("PR_AUTHOR", "unknown"))[
                    :50
                ]

                # Validate PR URL to prevent injection
                if pr_url != "#" and not re.match(
                    r"^https://github\.com/[\w-]+/[\w-]+/pull/\d+$", pr_url
                ):
                    pr_url = "#"  # Default to safe value if invalid

                # Build issue content safely
                issue_body = f"""## Automated Follow-ups from PR #{pr_num}

Source: {pr_url}
Author: @{pr_author}

## Issues to Triage

{chr(10).join(checklist)}

## Instructions

For agents/PMs: Review, prioritize, and move high-value items to sprint YAML files.

---
Auto-generated by ARC-Reviewer"""

                with open("issue_body.md", "w") as f:
                    f.write(issue_body)

                print("âœ… Issue body created successfully")

            else:
                print("No automation issues found")
        except Exception as e:
            print(f"Error processing automation data: {e}")
    else:
        print("No automation comment found")

except Exception as e:
    print(f"Error reading automation file: {e}")
    sys.exit(1)
