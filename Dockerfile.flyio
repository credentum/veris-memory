# Multi-stage Dockerfile for Fly.io deployment
# Stage 1: Build dependencies and download binaries
FROM ubuntu:22.04@sha256:965fbcae990b0467ed5657caceaec165018ef44a4d2d46c7cdea80a9dff0d1ea AS builder

# Prevent interactive prompts during apt install
ENV DEBIAN_FRONTEND=noninteractive

# Install build dependencies
RUN apt-get update && apt-get install -y \
    # Essential build tools
    wget \
    curl \
    gpg \
    ca-certificates \
    # Python build dependencies
    python3.11 \
    python3-pip \
    python3.11-venv \
    # Build tools for Python packages
    build-essential \
    python3.11-dev \
    && rm -rf /var/lib/apt/lists/*

# Create Python virtual environment
RUN python3.11 -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy and install Python requirements in builder stage
COPY requirements.txt requirements-dev.txt ./
RUN pip install --no-cache-dir --upgrade pip \
    && pip install --no-cache-dir -r requirements.txt

# Build args for configurable Qdrant version and checksum
ARG QDRANT_VERSION=1.14.0
ARG QDRANT_SHA256=28e344971b38fc4682b8a7bf4952be6bb46f6f6604b0630a79db897164d2cc12

# Download and verify Qdrant binary
RUN QDRANT_URL="https://github.com/qdrant/qdrant/releases/download/v${QDRANT_VERSION}/qdrant-x86_64-unknown-linux-gnu.tar.gz" \
    && EXPECTED_SHA256="${QDRANT_SHA256}" \
    && wget "${QDRANT_URL}" -O qdrant.tar.gz \
    && echo "Verifying Qdrant binary checksum..." \
    && ACTUAL_SHA256=$(sha256sum qdrant.tar.gz | cut -d' ' -f1) \
    && echo "Expected: ${EXPECTED_SHA256}" \
    && echo "Actual:   ${ACTUAL_SHA256}" \
    && if [ "${ACTUAL_SHA256}" != "${EXPECTED_SHA256}" ]; then \
        echo "ERROR: Checksum verification failed! Aborting build for security." && exit 1; \
    fi \
    && echo "Checksum verification passed" \
    && tar xzf qdrant.tar.gz \
    && mv qdrant /usr/local/bin/ \
    && rm qdrant.tar.gz

# Stage 2: Runtime image
FROM ubuntu:22.04@sha256:965fbcae990b0467ed5657caceaec165018ef44a4d2d46c7cdea80a9dff0d1ea AS runtime

# Prevent interactive prompts during apt install
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Install only runtime dependencies
RUN apt-get update && apt-get install -y \
    # Python runtime
    python3.11 \
    python3.11-venv \
    # Java for Neo4j (minimal JRE)
    openjdk-11-jre-headless \
    # System utilities (minimal set)
    curl \
    supervisor \
    netcat-openbsd \
    # Monitoring utilities
    bc \
    procps \
    # Redis
    redis-server \
    # Required for Neo4j installation
    wget \
    gpg \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Copy Python virtual environment from builder
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy Qdrant binary from builder
COPY --from=builder /usr/local/bin/qdrant /usr/local/bin/qdrant

# Install Neo4j with proper GPG verification
RUN mkdir -p /etc/apt/keyrings \
    && wget -O - https://debian.neo4j.com/neotechnology.gpg.key | gpg --dearmor -o /etc/apt/keyrings/neo4j.gpg \
    && echo "deb [signed-by=/etc/apt/keyrings/neo4j.gpg] https://debian.neo4j.com stable latest" > /etc/apt/sources.list.d/neo4j.list \
    && apt-get update \
    && apt-get install -y neo4j \
    && rm -rf /var/lib/apt/lists/*

# Create application directory
WORKDIR /app

# Create data directories
RUN mkdir -p /app/data/qdrant /app/data/neo4j /app/data/redis /app/logs \
    && mkdir -p /var/lib/neo4j/data /var/lib/neo4j/logs

# Copy Python application
COPY src/ ./src/
COPY schemas/ ./schemas/
COPY contracts/ ./contracts/

# Copy configuration files
COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf
COPY start-services.sh /app/start-services.sh
RUN chmod +x /app/start-services.sh

# Copy monitoring and secrets management
COPY monitoring/ /app/monitoring/
COPY secrets/ /app/secrets/
RUN chmod +x /app/monitoring/*.sh /app/secrets/*.sh

# Configure Redis (memory limits will be set dynamically in start script)
RUN echo "bind 127.0.0.1" >> /etc/redis/redis.conf \
    && echo "port 6379" >> /etc/redis/redis.conf \
    && echo "dir /app/data/redis" >> /etc/redis/redis.conf \
    && echo "maxmemory-policy allkeys-lru" >> /etc/redis/redis.conf

# Configure Neo4j
ENV NEO4J_HOME=/var/lib/neo4j
# Create Neo4j configuration directory and file
RUN mkdir -p /var/lib/neo4j/conf /etc/neo4j \
    && echo "server.default_listen_address=0.0.0.0" > /var/lib/neo4j/conf/neo4j.conf \
    && echo "server.bolt.listen_address=0.0.0.0:7687" >> /var/lib/neo4j/conf/neo4j.conf \
    && echo "server.http.listen_address=0.0.0.0:7474" >> /var/lib/neo4j/conf/neo4j.conf \
    && echo "server.directories.data=/app/data/neo4j" >> /var/lib/neo4j/conf/neo4j.conf \
    && echo "server.directories.logs=/app/logs" >> /var/lib/neo4j/conf/neo4j.conf \
    && cp /var/lib/neo4j/conf/neo4j.conf /etc/neo4j/neo4j.conf

# Create neo4j user and set permissions
RUN if ! id "neo4j" &>/dev/null; then useradd -r -s /bin/false neo4j; fi \
    && chown -R neo4j:neo4j /var/lib/neo4j /app/data/neo4j /app/logs \
    && chmod -R 755 /var/lib/neo4j /app/data/neo4j

# Expose ports
EXPOSE 8000 6333 6334 7474 7687 6379

# Environment variables
ENV QDRANT_URL=http://localhost:6333
ENV NEO4J_URI=bolt://localhost:7687
ENV NEO4J_USER=neo4j
ENV REDIS_URL=redis://localhost:6379
ENV MCP_SERVER_PORT=8000
ENV LOG_LEVEL=info

# Create non-root user for security
RUN adduser --uid 1001 --disabled-password app \
    && chown -R app:app /app

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=120s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Switch to non-root user
USER app

# Start all services using enhanced startup script
CMD ["/app/start-services.sh"]
