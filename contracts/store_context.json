{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "schema_version": "1.0",
  "name": "store_context",
  "description": "Store context data with embeddings and graph relationships",
  "version": "1.0.0",
  "inputSchema": {
    "type": "object",
    "required": ["content", "type"],
    "properties": {
      "content": {
        "type": "object",
        "description": "The context content to store (YAML parsed to object)"
      },
      "type": {
        "type": "string",
        "enum": ["design", "decision", "trace", "sprint", "log"],
        "description": "Type of context being stored"
      },
      "metadata": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string",
            "description": "Source identifier for the context"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags for categorization"
          },
          "priority": {
            "type": "string",
            "enum": ["low", "medium", "high", "critical"],
            "description": "Priority level of the context"
          }
        }
      },
      "relationships": {
        "type": "array",
        "items": {
          "type": "object",
          "required": ["type", "target"],
          "properties": {
            "type": {
              "type": "string",
              "description": "Relationship type (e.g., 'implements', 'references')"
            },
            "target": {
              "type": "string",
              "description": "Target node ID or identifier"
            }
          }
        },
        "description": "Graph relationships to establish"
      }
    }
  },
  "outputSchema": {
    "type": "object",
    "required": ["success", "id"],
    "properties": {
      "success": {
        "type": "boolean",
        "description": "Whether the storage was successful"
      },
      "id": {
        "type": "string",
        "description": "Unique identifier for the stored context"
      },
      "vector_id": {
        "type": "string",
        "description": "Vector database ID if embedding was created"
      },
      "graph_id": {
        "type": "string",
        "description": "Graph database node ID if created"
      },
      "message": {
        "type": "string",
        "description": "Success or error message"
      },
      "validation_errors": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Any validation errors encountered"
      }
    }
  },
  "examples": [
    {
      "input": {
        "content": {
          "id": "decision-001",
          "title": "Use TypeScript for MCP Server",
          "status": "approved",
          "rationale": "Better type safety and tooling"
        },
        "type": "decision",
        "metadata": {
          "source": "sprint-5",
          "tags": ["architecture", "technology"],
          "priority": "high"
        }
      },
      "output": {
        "success": true,
        "id": "ctx_abc123",
        "vector_id": "vec_xyz789",
        "graph_id": "node_456",
        "message": "Context stored successfully"
      }
    }
  ]
}
