{
  "schema_version": "1.0",
  "name": "store_context",
  "version": "1.0.0",
  "api_version": "1.0",
  "min_client_version": "1.0.0",
  "deprecated_fields": [],
  "description": "Store contextual information with metadata and semantic relationships",
  "inputSchema": {
    "type": "object",
    "properties": {
      "type": {
        "type": "string",
        "description": "Type of context being stored",
        "enum": ["design", "decision", "trace", "sprint", "log"]
      },
      "content": {
        "type": "object",
        "description": "The main content to store",
        "properties": {
          "title": {
            "type": "string",
            "description": "Brief title or summary"
          },
          "description": {
            "type": "string",
            "description": "Detailed description or content"
          },
          "data": {
            "type": "object",
            "description": "Additional structured data"
          }
        },
        "required": ["title", "description"]
      },
      "metadata": {
        "type": "object",
        "description": "Optional metadata for context organization",
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags for categorization"
          },
          "priority": {
            "type": "string",
            "enum": ["low", "medium", "high", "critical"],
            "description": "Priority level"
          },
          "author": {
            "type": "string",
            "description": "Author or creator"
          },
          "project": {
            "type": "string",
            "description": "Project or component name"
          }
        }
      },
      "relationships": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "target_id": {
              "type": "string",
              "description": "ID of related context item"
            },
            "relationship_type": {
              "type": "string",
              "enum": [
                "depends_on",
                "blocks",
                "relates_to",
                "implements",
                "references"
              ]
            }
          },
          "required": ["target_id", "relationship_type"]
        },
        "description": "Relationships to other context items"
      }
    },
    "required": ["type", "content"]
  },
  "outputSchema": {
    "type": "object",
    "properties": {
      "success": {
        "type": "boolean",
        "description": "Whether the operation succeeded"
      },
      "context_id": {
        "type": "string",
        "description": "Unique identifier for the stored context"
      },
      "message": {
        "type": "string",
        "description": "Status message or error description"
      },
      "storage_info": {
        "type": "object",
        "properties": {
          "vector_stored": {
            "type": "boolean",
            "description": "Whether vector embedding was created"
          },
          "graph_stored": {
            "type": "boolean",
            "description": "Whether graph relationships were stored"
          },
          "cache_stored": {
            "type": "boolean",
            "description": "Whether item was cached for quick access"
          }
        }
      }
    },
    "required": ["success", "context_id", "message"]
  },
  "security": {
    "rate_limits": {
      "requests_per_minute": 60,
      "burst_limit": 10
    },
    "validation": {
      "content_max_size": 50000,
      "sanitize_html": true,
      "validate_relationships": true
    }
  }
}
