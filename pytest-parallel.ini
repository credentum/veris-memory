[tool:pytest]
# Test discovery patterns
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Add src to Python path for imports  
pythonpath = . src

# PARALLEL EXECUTION OPTIMIZED CONFIGURATION
addopts =
    # Parallel execution with auto-detection of CPU cores (leave 2 for system)
    -n auto
    --maxfail=10
    --tb=short
    --durations=20
    -v
    # Coverage configuration - optimized for parallel execution
    --cov=src
    --cov-report=term-missing:skip-covered
    --cov-report=json:coverage.json
    --cov-branch
    --cov-fail-under=15
    # Test execution optimization
    --strict-markers
    --strict-config
    # Timeout protection (5 minutes per test)
    --timeout=300

# Parallel execution distribution strategy
dist = loadscope  # Distribute tests by scope (class/module) for better isolation

# Markers for different test types and execution strategies
markers =
    unit: Unit tests (fast, highly parallel)
    integration: Integration tests (moderate parallelization)
    slow: Slow running tests (limited parallelization)
    mcp: MCP protocol tests
    storage: Storage backend tests  
    security: Security validation tests
    performance: Performance/benchmark tests (run serially)
    serial: Tests that must run serially (one at a time)

# Asyncio configuration for parallel execution
asyncio_mode = auto

# Test filtering - exclude problematic directories
norecursedirs =
    .git
    .tox
    dist
    build
    *.egg
    __pycache__
    .coverage*
    coverage_html
    benchmarks
    scripts

# Ignore warnings from dependencies
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::RuntimeWarning:.*asyncio.*
    ignore::UserWarning:.*duckdb.*
    # Ignore xdist warnings
    ignore::UserWarning:.*pytest_asyncio.*

# Minimum version
minversion = 6.0

# Xdist configuration
rsyncdirs = src tests
rsyncignore = 
    .git
    *.pyc
    __pycache__
    .coverage*
    coverage_html